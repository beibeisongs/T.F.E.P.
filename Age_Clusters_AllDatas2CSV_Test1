# encoding=utf-8
# Date: 2018-7-30
# Author: MJUZY


import os
import json
import csv
from sklearn.cluster import KMeans
import numpy as np
from matplotlib import pyplot as plt


def checkText(text, text_check):

    Loop_Mark = True
    while Loop_Mark:

        length = len(text)
        i = 0
        for i in range(length):
            before = text[i]
            # print("before : ", before)
            # print("len(before) : ", len(before))
            # print("utf-8", before.encode('utf-8'))
            # print("utf-8", len(before.encode('utf-8')))

            len_before = len(before.encode('utf-8'))

            if (len_before == 4) or (len_before == 1) or (len_before == 2):
                text = text.replace(text[i], '')
                # print("后来：", text)
                break

        if i == length - 1:
            Loop_Mark = False
        if length == 0:
            break

    # print(Loop_Mark)

    text_check = True

    return text, text_check


def commitOrder2(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger):

    csvFile2 = open(csv_filename, 'a+', newline='')  # 设置newline，否则两行之间会空一行
    writer = csv.writer(csvFile2)

    datas = [get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger]

    writer.writerow(datas)

    csvFile2.close()


def exportIDJson(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger):

    try:
        commitOrder2(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger)
        print("Finish export scores_json Info ! ")
    except:
        text = str(text)
        text_check = False
        text, text_check = checkText(text, text_check)
        print("text : ", text)
        print("text-check", text_check)

        try:
            commitOrder2(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger)
            print("Finish export scores_json Info ! ")
        except:
            # 实在不行就不要了
            text = "NULL"

            try:
                commitOrder2(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger)
                print("Finish export scores_json Info ! ")
            except:
                text = "NULL"
                street_address = "NULL"
                title = "NULL"
                poiid = "NULL"
                commitOrder2(csv_filename, get_user_id, idstr, created_at, poiid, title, lon, lat, gender, text, street_address, get_age_value, get_female_score, get_male_score, belonger)
					

def getUserElements(rline):

    created_at = rline["created_at"]

    try:
        annotations = rline["annotations"]
        annotation_0 = annotations[0]
        place = annotation_0["place"]

        poiid = place["poiid"]
        title = place["title"]
    except:
        poiid = "NULL"
        title = "NULL"

    geo = rline["geo"]
    coordinates = geo["coordinates"]

    lon = coordinates[1]
    lat = coordinates[0]

    try:
        user = rline["user"]
        gender = user["gender"]
    except:
        gender = "NULL"

    try:
        text = rline["text"]
    except:
        text = "NULL"

    try:
        url_objects = rline["url_objects"]
        url_objects_0 = url_objects[0]
        _object = url_objects_0["object"]
        __object = _object["object"]
        address = __object["address"]
        street_address = address["street_address"]
    except:
        street_address = "NULL"

    return created_at, poiid, title, lon, lat, gender, text, street_address


def judgeBoundary(b, get_age_value):

    if (b[0] <= get_age_value) and (b[1] >= get_age_value):
        csv_filename = str(b[0]) + "_" + str(b[1]) + '.csv'
    elif (b[1] < get_age_value) and (b[2] >= get_age_value):
        csv_filename = str(b[1]) + "_" + str(b[2]) + '.csv'
    elif (b[2] < get_age_value) and (b[3] >= get_age_value):
        csv_filename = str(b[2]) + "_" + str(b[3]) + '.csv'
    elif (b[3] < get_age_value) and (b[4] >= get_age_value):
        csv_filename = str(b[3]) + "_" + str(b[4]) + '.csv'
    else:
        csv_filename = -1

    return csv_filename


def get_JsonScoresSource_Belonger(json_results_source_wholepath):

    f1 = open(json_results_source_wholepath, mode='r')

    try:

        for line in f1.readlines():

            rline = json.loads(line)

            belonger = rline["Belonger"]  # <Sample>: <type 'list'>: [u'011f0bd4jw1ek0s5x0uysj20qo0zkwn2_extraction_1', u'011f0bd4jw1ekdf0acjsmj218g0xcduc_extraction_1']
            get_faces = rline["faces"]
            get_faces_dic = get_faces[0]
            get_attributes = get_faces_dic["attributes"]

            get_gender = get_attributes["gender"]
            get_gender_value = get_gender["value"]

            get_age = get_attributes["age"]
            get_age_value = get_age["value"]

            get_beauty = get_attributes["beauty"]
            get_female_score = get_beauty["female_score"]
            get_male_score = get_beauty["male_score"]
    except:

        belonger = -1
        get_gender_value = -1
        get_age_value = -1
        get_female_score = -1
        get_male_score = -1

    return belonger, get_gender_value, get_age_value, get_female_score, get_male_score


def goThroughFiles(path, b):

    AccountFileNumber = 0  # To show the number the Account being read
    for dirpath, dirnames, filenames in os.walk(path):
        for filepath in filenames:  # <Sample>: filepath = '1982819117.json'

            path_Divided = dirpath.split('\\')

            if len(path_Divided) >= 5:

                get_user_id = path_Divided[4]

                path = os.path.join(dirpath, filepath)
                path_Divided = str(path).split('.')

                if (filepath == get_user_id + ".json"):
                    print("账号：", get_user_id)
                    AccountFileNumber += 1
                    print("这是第 %i 个账号" % (AccountFileNumber))

                    if (AccountFileNumber >= start_pt) and (AccountFileNumber <= end_pt):
                        if os.path.exists(dirpath + "\\" + "Ext_Step_Ok") == True:
                            if os.path.exists(dirpath + "\\" + get_user_id + "\\" + "Results.json") == True:

                                print("Results.json Existing !")
                                print("-----------------------")

                                if os.path.exists(dirpath + "\\" + get_user_id + "\\" + "Face_Scores.json"):
                                    json_scores_source_wholepath = dirpath + "\\" + get_user_id + "\\" + "Face_Scores.json"
                                    belonger, get_gender_value, get_age_value, get_female_score, get_male_score = get_JsonScoresSource_Belonger(json_scores_source_wholepath)
                                    if get_age_value != -1:
                                        csv_filename = judgeBoundary(b, get_age_value)
                                        if csv_filename != -1:
                                            path_idjson = dirpath + "\\" + get_user_id + ".json"
                                            f1 = open(path_idjson, encoding='utf-8')
                                            print("open id_json_file ok !")

                                            line_i = 0
                                            idstr_temp = ""
                                            for line in f1.readlines():
                                                line_i += 1
                                                # print("现在的id_json行数是：", line_i)

                                                # rline is carrying the whole json information of the current json file now
                                                rline = json.loads(line)

                                                idstr = rline["idstr"]
                                                if line_i == 1:
                                                    idstr_temp = idstr

                                                    created_at, poiid, title, lon, lat, gender, text, street_address = getUserElements(rline)
                                                    gender = get_gender_value
                                                    exportIDJson(csv_filename, get_user_id, idstr, created_at,
                                                                             poiid, title, lon, lat, gender, text,
                                                                             street_address, get_age_value, get_female_score, get_male_score, belonger)
                                                else:
                                                    if idstr != idstr_temp:
                                                        created_at, poiid, title, lon, lat, gender, text, street_address = getUserElements(rline)
                                                        exportIDJson(csv_filename, get_user_id, idstr, created_at,
                                                                                 poiid, title, lon, lat, gender, text,
                                                                                 street_address, get_age_value, get_female_score, get_male_score, belonger)
                                                        idstr_temp = idstr


if __name__ == "__main__":

    # b = [12, 22, 27, 33, 40, 50, 63, 88]
    b = [16, 22, 27, 33, 40, 50, 63, 88]

    print("请输入想要处理的省份")
    # province = input()
    province = "浙江省"

    print("请输入想要处理的地级市")
    # city = input()
    city = "杭州市"

    start_pt = 0
    end_pt = 230000

    path = "F:\\用户的文件\\" + province + "\\" + city
    goThroughFiles(path, b)
